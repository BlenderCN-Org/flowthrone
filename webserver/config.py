import os
import subprocess

SERVER_PATH = os.path.dirname(os.path.abspath(__file__))
FLOWTHRONE_ROOT = os.path.split(SERVER_PATH)[0]
FLOWTHRONE_BUILD_PATH = os.path.join(FLOWTHRONE_ROOT, 'build')
FLOWTHRONE_OPTIONS_PBTXT = os.path.join(
        FLOWTHRONE_BUILD_PATH, 'config', 'flowthrone.pbtxt')
ALLOWED_VIDEO_EXTENSIONS = ['mp4', 'avi', 'webm']                                       
ALLOWED_IMAGE_EXTENSIONS = ['jpg', 'jpeg', 'bmp', 'png']
MAX_CONTENT_LENGTH = 16 * 1024 * 1024 # 16 mb
SERVER_PATH = os.path.dirname(os.path.abspath(__file__))
UPLOAD_FOLDER = os.path.join(SERVER_PATH, 'uploads/')
# Results generated by posting to the 'demo' page are stored here.
EXAMPLES_FOLDER = os.path.join(UPLOAD_FOLDER, 'examples/')
# Evaluation results on a generic dataset are posted here.
RESULTS_FOLDER = os.path.join(UPLOAD_FOLDER, 'results/')
OUTPUT_IMAGE_FILENAME = 'output.png'
OUTPUT_VIDEO_FILENAME = 'output.webm' # VP80 in opencv.
OUTPUT_LOG_FILENAME = 'output.log'

DEFAULT_OPTICAL_FLOW_OPTIONS = open(FLOWTHRONE_OPTIONS_PBTXT).read()

# Make the uploads directory if necessary.
for f in [UPLOAD_FOLDER, EXAMPLES_FOLDER, RESULTS_FOLDER]:
    if not os.path.exists(f):
        os.mkdir(f)

# Compile the proto if necessary.
# Note: this is a little bit dangerous -- the .proto may change, and the
# compiled python will not be recompiled.
if not os.path.exists(os.path.join(SERVER_PATH, 'flowthrone_pb2.py')) and \
    not os.path.exists(os.path.join(SERVER_PATH, 'flowthrone_pb2.pyc')):
    proto_path = os.path.join(FLOWTHRONE_ROOT, 'flowthrone', 'proto')
    proto_fn = os.path.join(proto_path, 'flowthrone.proto')
    cmd = ['protoc', '--proto_path', proto_path, proto_fn, '--python_out', SERVER_PATH]
    print "Compiling proto to python using '{}'".format(' '.join(cmd))
    try:
        subprocess.check_call(cmd)
    except Exception:
        print "Failed running '{}'".format(' '.join(cmd))
