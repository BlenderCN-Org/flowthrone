// A single .proto file containing all messages.
syntax = "proto2";
package flowthrone;
option cc_enable_arenas = true;

// Set of parameters for OpticalFlowTensorFlowModel class.
message OpticalFlowTensorFlowModelOptions {
  // Path to the directory containing tensorflow SavedModelBundle.
  // The model should have two inputs named "x1" and "x2" and an output named
  // "prediction".
  // TODO: This restriction should be lifted in the future.
  optional string export_dir = 1;

  // Names of the input tensors.
  repeated string input_tensor_name = 4;
  // Name(s) of the output tensors.
  repeated string output_tensor_name = 5;

  // Whether should perform inference in 'one-shot' -- single evaluation of the
  // network over a pair of images, of whether image should be split into a
  // collection of windows, which are then fed to the network.
  // Setting the parameter to true is obviously more expensive, but will likely
  // give nicer results.
  optional bool sliding_window = 2 [default = true];
  // Stride used when sliding_window is set to true. Values larger than 1.0 are
  // discouraged (since it implies that windows have gaps, which does not
  // really make sense). When set to 1.0, there is no overlap, and you might
  // see undesireable artifacts at the boundary.
  optional double window_stride = 3 [default = 1.0];
};


// Message for specifying a collection of image pair / groundtruth triplets,
// to be used for evaluation.
message EvaluationInput {
  message Datum {
    // Path to the first and second image on which flow should be computed.
    optional string image0_filename = 1;
    optional string image1_filename = 2;
    // Path to .flo file with groundtruth.
    optional string gt_filename = 3;
    // Identifier (e.g. sequence/image name).
    optional string identifier = 4;
  }
  repeated Datum datum = 1;
}

// Message for storing evaluation results.
message EvaluationOutput {
  // Per-datum evaluation result.
  message Result {
    optional float average_angular_error = 1;
    optional float average_endpoint_error = 2;
    // Time it took to compute the result in seconds.
    optional float elapsed = 4;
    // Name of the image pair.
    optional string identifier = 3;
  }
  // Per-image pair result.
  repeated Result result = 1;
  // Average results.
  optional Result average_summary = 2;

  // Summaries for different percentiles, computed across image pairs.
  map<int32, Result> percentile_summary = 3;
}
